I"s<h2 id="시나리오">시나리오</h2>

<font size="3">
신일이는 최근 가장 잘나가는 게임인 gmm을 하고싶지만 구매하기에는 돈이 아까워했다.
그래서 인터넷에 gmm 무료 설치파일을 발견하고 다운로드 받았다.
"설치방법.txt"에 나온대로 "GMM1.exe"를 관리자 권한으로 실행하였다.
하지만 그 파일은 사실 랜섬웨어였고 신일이의 PC는 랜섬웨어에 감염이 되고만다.
감염 후 자신의 행동을 반성하고자 gmm 사이트에 접속하여 랜섬웨어 분석 공부를 시작하게 되었는데...
</font>

<h1 id="분석-순서">분석 순서</h1>

<ol>
  <li>vm에 ova(or ovf) 파일을 import한다.</li>
  <li>“basic-0” 스냅샷으로 이동한다.</li>
  <li>전원을 키고 바탕화면에 있는 GMM1.exe를 관리자 권한으로 실행한다.</li>
  <li>실행 후 변화를 인지하고 스냅샷 “basic-0”으로 돌아온다.</li>
  <li>랜섬웨어인 GMM1.exe을 분석해본다.</li>
</ol>

<font size="3">
사용툴 :  Exeinfo PE, Bin Text, PEview, Process Monitor, processHacker, OllyDBG

Exeinfo PE(PE파일 분석툴)을 사용하여
패킹여부 확인 및 사용언어 C++ 확인 [빌드에 사용된 프로그램 Visual studio사용 확인]
</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869491-bdc68380-2c0e-11eb-82cb-03b3149eacd9.jpg" /></p>
<font size="3">패킹여부와 컴파일 프로그램 확인</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869527-00885b80-2c0f-11eb-86b0-d0c6420e2b4a.jpg" /></p>
<font size="3">문자열 검색 </font>

<font size="4">
패킹이 안 되있는 것을 확인 후 문자열 검색툴인 BinText 사용
문자열 검색은 C&amp;C서버의 주소, 프로그램의 출력메세지, 윈도우 함수 명령 등을 추출가능
공격자가 의도치 않게 놓친 문자열을 보고 해당 프로그램의 취약점을 발견 가능하다.

만일 문자열이 적게 검색 되거나 의미없는 문자열만 존재한다면 패킹이나 난독화를 의심
</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869544-2dd50980-2c0f-11eb-9b69-bc46198edb8d.gif" /></p>
<font size="3">GMM1.exe 실행후 프로세스 변화</font>

<font size="4">
ProcessHacker 툴을 사용하고 GMM1.exe를 실행하여 프로세스가 실시간으로 어떤 변화가 있는지
확인하고 해당 프로세스들이
SearchProtocol, SearchFilterHost, dllhost, conhost 4가지의 프로세스가 추가됨을 알수있다.
</font>
<ol>
  <li>SearchProtocol과 SearchFilterHost를 보아 해당 샘플은 감염PC에서 무언가를 검색하여 찾아내며,</li>
  <li>conhost(콘솔창)를 사용하여 명령어를 사용하지만 콘솔창을 숨기고 알수없는 명령어를 실행한다는것</li>
  <li>dllhost.exe 같은 경우 window에서 기본적으로 사용하는 응용프로그램 관리 프로세스지만 PC자원을 많이 소비하는 등의 이상징후가 있는 경우 악성코드를 의심해봐야한다.</li>
</ol>

<p>이후 프로세스의 흐름을 따라가보기 위해
GMM1.exe를 실행하기전의 스냅샷으로 돌아가procmon을 실행</p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869630-07fc3480-2c10-11eb-99e6-e9c78cfadd8a.jpg" /></p>
<font size="3">Procmon (프로세스 모니터 실행 화면)</font>

<font size="4">
실행후 Ctrl + E를 눌러 캡쳐 시작하면 무수히 많은 프로세스가 나오는것을 확인할수있음
그 상태에서 GMM1.exe를 실행하고 파일이 삭제될때까지 캡쳐후 Ctrl + E를 눌러 캡쳐중지

무수히 많은 프로세스중 우리가 필요한 프로세스만을 확인 하기 위해
Ctrl+L을 눌러 필터링 창을 열고 Process Name is GMM1.exe에 맞춰 검색한다.
</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869637-0cc0e880-2c10-11eb-8159-0637b43e1b9e.jpg" /></p>
<font size="3">
프로세스 모니터 필터링
</font>

<font size="4">
그래도 아직 많은 프로세스들이 확인되고 있기 때문에 우리가 전 단계에서 확인했던 명령프롬프트를 실행한다는 점을 고려하여 Path Contains cmd를 추가하고
더 확실하게 하기 위하여 Operation is Process Create을 추가해주면 단 3개의 프로세스를 확인 할 수있다.
</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869638-0d597f00-2c10-11eb-8bac-a7e13642c5c9.jpg" /></p>
<font size="3">
프로세스 모니터 필터링
</font>

<font size="4">
이로서 전단계에서 백드라운드 실행이 된 명령어가 특정폴더에 있는 .GMM파일을 삭제한다는 것을 확인할수 있었으며, 간단하게 Ctrl + T를 눌러 프로세스 트리를 확인하여 확인할수도있다.
</font>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869650-19ddd780-2c10-11eb-91b6-d9f63f8208d5.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869651-1b0f0480-2c10-11eb-9b61-186b6ceb81ce.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869652-1c403180-2c10-11eb-9200-060bcf0c823e.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869653-1cd8c800-2c10-11eb-9980-65d134ae33ec.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869654-1d715e80-2c10-11eb-9de4-777f8cbd3f3c.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869655-1ea28b80-2c10-11eb-8863-dadb18ac4600.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869656-1f3b2200-2c10-11eb-9fcd-bc28a08ec3d6.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869657-1f3b2200-2c10-11eb-8a8a-023edbd85ab4.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869658-206c4f00-2c10-11eb-8f0f-b5d88e5212ff.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869660-2104e580-2c10-11eb-965a-e8135bffa7e3.jpg" /></p>

<p><img width="654" alt="" src="https://user-images.githubusercontent.com/65612054/99869661-219d7c00-2c10-11eb-98ef-b238b4f92144.jpg" /></p>
:ET